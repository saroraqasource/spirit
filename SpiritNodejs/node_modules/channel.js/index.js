"use strict";
class channel {
  go_(machine, step) {
    while (!step.done) {
      let arr = step.value(),
        state = arr[0],
        value = arr[1];
      switch (state) {
        case 'timeout':
          setTimeout(() => {
            this.go_(machine, machine.next());
          }, value);
          return;
        case "park":
          setTimeout(() => {
            this.go_(machine, step);
          }, 0);
          return;
        case "continue":
          step = machine.next(value);
          break;
      }
    }
  }
  go(machine) {
    let gen = machine();
    this.go_(gen, gen.next());
  }
  timeout(interval) {
    let chan = [interval];
    chan.name = 'timeout';
    return chan;
  }
  take(chan) {
    return function () {
      if (chan.name === 'timeout') {
        return ['timeout', chan.pop()];
      } else if (chan.length === 0) {
        return ["park", null];
      } else {
        let val = chan.pop();
        return ["continue", val];
      }
    };
  }
  put(chan, val) {
    return function () {
      if (chan.length === 0) {
        chan.unshift(val);
        return ["continue", null];
      } else {
        return ["park", null];
      }
    };
  }
}

if (typeof module != 'undefined' && module.exports)
  module.exports = channel;